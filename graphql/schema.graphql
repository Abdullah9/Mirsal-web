"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec"
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

type Mutation {
    login(input: LoginInput @spread): UserResponse! @field(resolver: "LoginMutator") 
    register(input: RegisterInput @spread): UserResponse! @field(resolver: "RegisterMutator")

    
}

extend type Mutation @middleware(checks: ["auth:api"]){
    

    logout: LogoutResponse! @field(resolver: "LogoutMutator")

    #VETERINARIAN
    createVetRequest(input: CreateVetRequestInput @spread): VetRequest! @create(model: "App\\Model\\VetRequest")
    updateVetRequest(input: UpdateVetRequestInput @spread): VetRequest! @update(model: "App\\Model\\VetRequest")
    deleteVetRequest(id: ID!): VetRequest! @delete(model: "App\\Model\\VetRequest")

    createVetOffer(input: CreateVetOfferInput @spread): VetOffer! @create(model: "App\\Model\\VetOffer")
    updateVetOffer(input: UpdateVetOfferInput @spread): VetOffer! @update(model: "App\\Model\\VetOffer")
    deleteVetOffer(id: ID!): VetOffer! @delete(model: "App\\Model\\VetOffer")

    #DRIVER
    createDriverRequest(input: CreateDriverRequestInput @spread): DriverRequest! @create(model: "App\\Model\\DriverRequest")
    updateDriverRequest(input: UpdateDriverRequestInput @spread): DriverRequest! @update(model: "App\\Model\\DriverRequest")
    deleteDriverRequest(id: ID!): DriverRequest! @delete(model: "App\\Model\\DriverRequest")

    createDriverOffer(input: CreateDriverOfferInput @spread): DriverOffer! @create(model: "App\\Model\\DriverOffer")
    updateDriverOffer(input: UpdateDriverOfferInput @spread): DriverOffer! @update(model: "App\\Model\\DriverOffer")
    deleteDriverOffer(id: ID!): DriverOffer! @delete(model: "App\\Model\\DriverOffer")

    #CLIENT
    createProduct(input: CreateProductInput @spread): Product @create(model: "App\\Model\\Product")
    updateProduct(input: UpdateProductInput @spread): Product @update(model: "App\\Model\\Product")
    deleteProduct(id: ID!): Product @delete(model: "App\\Model\\Product")

    createClientOffer(input: CreateClientOfferInput @spread): ClientOffer! @create(model: "App\\Model\\ClientOffer")
    updateClientOffer(input: UpdateClientOfferInput @spread): ClientOffer! @update(model: "App\\Model\\ClientOffer")
    deleteClientOffer(id: ID!): ClientOffer! @delete(model: "App\\Model\\ClientOffer")

    #INVOICE
    createInvoice(input: CreateInvoiceInput @spread): Invoice! @create(model: "App\\Model\\Invoice")
    updateInvoice(input: UpdateInvoiceInput @spread): Invoice! @create(model: "App\\Model\\Invoice")

    #Address
    createAddress(input: CreateAddressInput @spread): Address! @create(model: "App\\Model\\Address")


    #FUNCTIONS
    acceptVetOffer(input: acceptVetOfferInput @spread): AcceptVetOfferResponse @field(resolver: "VetOfferMutator@acceptVetOffer")

    #User
    userUploadAvatar(id: ID @eq, avatar: Upload! ): User! @update(model: "App\\User")
    updateUser(input: UpdateUserInput @spread): User @update(model: "App\\User")
}

type Query {


    Invoices(id: ID @eq, client_id: ID @eq, vetOffer_id: ID @eq, reference_id: String @eq): [Invoice!] @paginate(model: "App\\Model\\Invoice")

    getUsers(role: Roles @eq): [User!]! @paginate(model: "App\\User")
    getUser(id: ID @eq): User! @paginate(model: "App\\User")

    vetRequests(client_id: ID @eq, type: VetRequestTypes @eq): [VetRequest!] @paginate(model: "App\\Model\\VetRequest")
    vetRequest(id: ID @eq): VetRequest! @find(model: "App\\Model\\VetRequest")
    vetOffers(vet_request_id: ID @eq, vet_id: ID @eq): [VetOffer!] @paginate(model: "App\\Model\\VetOffer")
    vetOffer(id: ID @eq): VetOffer! @find(model: "App\\Model\\VetOffer")

    driverRequests(client_id: ID @eq, type: DriverRequestTypes @eq): [DriverRequest!] @paginate(model: "App\\Model\\DriverRequest")
    driverRequest(id: ID @eq): [DriverRequest!] @paginate(model: "App\\Model\\DriverRequest")
    driverOffers(driver_request_id: ID @eq, driver_id: ID @eq): [DriverOffer!] @paginate(model: "App\\Model\\DriverOffer")
    driverOffer(id: ID @eq): [DriverOffer!] @paginate(model: "App\\Model\\DriverOffer")

    products(seller_id: ID @eq, is_vip: Int @eq): [Product!]! @paginate(model: "App\\Model\\Product")
    products(id: ID @eq): [Product!]! @find(model: "App\\Model\\Product")
    clientOffers(seller_id: ID @eq, is_vip: Int @eq): [ClientOffer!]! @paginate(model: "App\\Model\\Product")
    clientOffers(id: ID @eq,): ClientOffer! @paginate(model: "App\\Model\\Product")

    animals: [Animal!] @paginate(model: "App\\Model\\Animal")
    sizes: [Size!] @paginate(model: "App\\Model\\Size")
}                                                                                                                                                                                                                                                                                                                              

extend type Query @middleware(checks: ["auth:api"]){

    me: User @auth

}


type User {
    id: ID!
    name: String!
    email: String!
    phone: String!
    role: Roles!
    created_at: DateTime!
    updated_at: DateTime!
}

# Inputs

input acceptVetOfferInput {
    vet_offer_id: ID!
}

input LoginInput {
    phone: String! @rules(apply: ["required", "min:10"])
    password: String! @rules(apply: ["required", "min:6"])
}

input RegisterInput {
    role: Roles!
    name: String! @rules(apply: ["required", "string"])
    email: String! @rules(apply: ["required", "email", "unique:users,email"])
    phone: String! @rules(apply: ["required", "min:10", "unique:users,phone"])
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
    avatar: Upload
}

input UpdateUserInput {
    id: ID!
    name: String! @rules(apply: ["string"])
    email: String! @rules(apply: ["email", "unique:users,email"])
    phone: String! @rules(apply:  ["min:10", "unique:users,phone"])
    password: String! @rules(apply: ["confirmed", "min:8"])
    password_confirmation: String!
    avatar: Upload
}

input OrderByInput{
    field: String!
    order: SortOrder!
}

input CreateAddressOperations {
  connect: ID
  create: CreateAddressInput @create(relation: "address")
  update: UpdateAddressInput @update(relation: "address")
}

input CreateAddressToOperations {
  connect: ID
  create: CreateAddressInput @create(relation: "addressTo")
  update: UpdateAddressInput @update(relation: "addressTo")
}

input CreateAddressFromOperations {
  connect: ID
  create: CreateAddressInput @create(relation: "addressFrom")
  update: UpdateAddressInput @update(relation: "addressFrom")
}

input CreateAddressInput {
    house_number: String
    street: String
    city: String
    postal_code: String
    loc_lat: String
    loc_long: String
}

input UpdateAddressInput {
    id: ID!
    house_number: String
    street: String
    city: String
    postal_code: String
    loc_lat: String
    loc_long: String
}

input CreateVetRequestInput {
    client_id: ID
    type: VetRequestTypes
    animal_id: ID!
    size_id: ID!
    description: String!
    address: CreateAddressOperations @nest
}

input UpdateVetRequestInput {
    id: ID!
    client_id: ID
    type: VetRequestTypes
    animal_id: ID
    size_id: ID
    description: String
    address: CreateAddressOperations @nest
}

input CreateVetOfferInput {
    vet_id: ID
    vet_request_id: ID
    price: String
    status: VetOfferStatuses
}

input UpdateVetOfferInput {
    id: ID!
    vet_id: ID
    vet_request_id: ID
    price: String
    status: VetOfferStatuses
}

input CreateInvoiceInput {
    client_id: ID!
    vet_offer_id: ID!
    reference_id: String!
    payment_gateway: String!
    amount_paid: String!
}

input UpdateInvoiceInput {
    id: ID!
    client_id: ID
    vet_offer_id: ID
    reference_id: String
    payment_gateway: String
    amount_paid: String
}

input CreateDriverRequestInput {
    client_id: ID
    type: DriverRequestTypes
    animal_id: ID!
    size_id: ID!
    description: String!
    quantity: String!
    address_from: CreateAddressFromOperations @nest
    address_to: CreateAddressToOperations @nest
}

input UpdateDriverRequestInput {
    id: ID!
    client_id: ID
    type: DriverRequestTypes
    animal_id: ID
    size_id: ID
    description: String
    address_from: CreateAddressFromOperations @nest
    address_to: CreateAddressToOperations @nest
}

input CreateDriverOfferInput {
    driver_id: ID!
    driver_request_id: ID!
    price: String!
    status: DriverOfferStatuses
}

input UpdateDriverOfferInput {
    id: ID!
    driver_id: ID
    driver_request_id: ID
    price: String
    status: DriverOfferStatuses
}

input CreateProductInput {
    title: String
    seller_id: ID
    address: CreateAddressOperations @nest
    status: ProductStatus
    type: ProductType
    is_vip: Int
    description: String
    duration_id: ID
    price: String
    contact_phone: String
    contact_email: String
    iban: String
    accepted_client_offer_id: ID
}

input UpdateProductInput {
    id: ID!
    title: String
    seller_id: ID
    address: CreateAddressOperations @nest
    status: ProductStatus
    type: ProductType
    is_vip: Int
    description: String
    duration_id: ID
    price: String
    contact_phone: String
    contact_email: String
    iban: String
    accepted_client_offer_id: ID
}

input CreateClientOfferInput {
    buyer_id: ID
    product_id: ID
    offered_price: String
    status: ClientOfferStatuses
    payment_status: ClientOfferPaymentStatuses
    note: String
}

input UpdateClientOfferInput {
    id: ID!
    buyer_id: ID
    product_id: ID
    offered_price: String
    status: ClientOfferStatuses
    payment_status: ClientOfferPaymentStatuses
    note: String
}


# Responses

type UserResponse {
    user: User!
    token: String!
}

type RoleResponse {
    name: String!
}

type LogoutResponse {
    status: String!
    message: String!
}

type Address {
    id: ID!
    house_number: String
    street: String
    city: String
    postal_code: String
    loc_lat: String
    loc_long: String
}

type VetRequest {
    id: ID
    client: User
    vet_offers: [VetOffer!]
    type: VetRequestTypes
    status: VetRequestStatuses
    animal: Animal
    size: Size
    description: String
    address: Address @belongsTo(relation: "address")
    created_at: String
}

type VetOffer {
    id: ID
    veterenarian: User
    vet_request: VetRequest @belongsTo(relation: "vetRequest")
    price: String
    status: String
    created_at: String
}

type DriverRequest {
    id: ID
    client: User
    driver_offers: [DriverOffer!]
    type: DriverRequestTypes
    status: DriverRequestStatuses
    animal: Animal
    size: Size
    quantity: String
    description: String
    address_to: Address @belongsTo(relation: "addressTo")
    address_from: Address @belongsTo(relation: "addressFrom")
    created_at: String
}

type DriverOffer {
    id: ID
    driver: User
    driver_request: DriverRequest @belongsTo(relation: "driverRequest")
    price: String
    status: String
    created_at: String
}

type Animal {
    id: ID
    name: String
    name_ar: String
}

type Size {
    id: ID
    name: String
    name_ar: String
}

type Invoice {
    id: ID
    client: User @belongsTo(relation: "client")
    vet_offer: VetOffer @belongsTo(relation: "vetOffer")
    payment_status: InvoiceStatuses
    amount_paid: String
    reference_id: String
    payment_gateway: String
    created_at: String
}

type Product {
    id: ID
    title: String
    seller: User @belongsTo(relation: "seller") 
    address: Address @belongsTo(relation: "address")
    status: ProductStatus
    type: ProductType
    is_vip: Int
    description: String
    duration: Duration @belongsTo(relation: "duration")
    price: String
    image: ImageFile @belongsTo(relation: "imageFile")
    contact_phone: String
    contact_email: String
    iban: String
    accepted_client_offer: ClientOffer @belongsTo(relation: "acceptedClientOffer")
}

type ClientOffer {
    id: ID
    buyer: User @belongsTo(relation: "buyer")
    product: Product @belongsTo(relation: "product")
    offered_price: String
    status: ClientOfferStatuses
    note: String
}

type ImageFile {
    id: ID
    image_name: String
}

type Duration {
    id: ID
    name: String
    name_ar: String
}

type AcceptVetOfferResponse {
    status: Int
    message: String
    invoice: Invoice
}

#Enums

enum Roles {
    ADMIN
    VETERINARIAN
    DRIVER
    CLIENT
}

enum SortOrder {
    ASC
    DESC
}

enum VetRequestTypes {
    CONSULTATION
    VISIT
}

enum VetOfferStatuses{
    PENDING
    SKIPPED
    ACCEPTED
    COMPLETED
}

enum ProductStatus{
    PENDING
    SOLD
    COMPLETED
}

enum ProductType{
    ANIMAL
    PRODUCT
}

enum DriverOfferStatuses{
    PENDING
    SKIPPED
    ACCEPTED
    COMPLETED
}

enum DriverRequestTypes {
    SHARE
    PRIVATE
}

enum ClientOfferStatuses{
    PENDING
    SKIPPED
    ACCEPTED
    COMPLETED
}

enum ClientOfferPaymentStatuses{
    PENDING
    PAID
}

enum VetRequestStatuses {
    PENDING
    SKIPPED
    ACCEPTED
    COMPLETED
}

enum DriverRequestStatuses {
    PENDING
    SKIPPED
    ACCEPTED
    COMPLETED
}

enum InvoiceStatuses {
    PENDING
    PAID
}