"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")


type Mutation {
    login(input: LoginInput @spread): UserResponse! @field(resolver: "LoginMutator") 
    register(input: RegisterInput @spread): UserResponse! @field(resolver: "RegisterMutator")

    #VETERINARIAN
    
    createVetRequest(input: CreateVetRequestInput @spread): VetRequest! @create(model: "App\\Model\\VetRequest")
    updateVetRequest(input: UpdateVetRequestInput @spread): VetRequest! @update(model: "App\\Model\\VetRequest")
    deleteVetRequest(id: ID!): VetRequest! @delete(model: "App\\Model\\VetRequest")

    createVetOffer(input: CreateVetOfferInput @spread): VetOffer! @create(model: "App\\Model\\VetOffer")
    updateVetOffer(input: UpdateVetOfferInput @spread): VetOffer! @update(model: "App\\Model\\VetOffer")
    deleteVetOffer(id: ID!): VetOffer! @delete(model: "App\\Model\\VetOffer")

    #DRIVER
    
    createDriverRequest(input: CreateVetRequestInput @spread): DriverRequest! @create(model: "App\\Model\\DriverRequest")
    updateDriverRequest(input: UpdateVetRequestInput @spread): DriverRequest! @update(model: "App\\Model\\DriverRequest")
    deleteDriverRequest(id: ID!): DriverRequest! @delete(model: "App\\Model\\DriverRequest")

    createDriverOffer(input: CreateDriverOfferInput @spread): DriverOffer! @create(model: "App\\Model\\DriverOffer")
    updateDriverOffer(input: UpdateDriverOfferInput @spread): DriverOffer! @update(model: "App\\Model\\DriverOffer")
    deleteDriverOffer(id: ID!): DriverOffer! @delete(model: "App\\Model\\DriverOffer")

    #INVOICE

    createInvoice(input: CreateInvoiceInput @spread): Invoice! @create(model: "App\\Model\\Invoice")
    updateInvoice(input: UpdateInvoiceInput @spread): Invoice! @create(model: "App\\Model\\Invoice")

    #Address

    createAddress(input: CreateAddressInput @spread): Address! @create(model: "App\\Model\\Address")

    
}

extend type Mutation @middleware(checks: ["auth:api"]){
    logout: LogoutResponse! @field(resolver: "LogoutMutator")
}

type Query {

    VetRequests(client_id: ID @eq): [VetRequest!] @paginate(model: "App\\Model\\VetRequest")
    VetOffers(vet_request_id: ID @eq): [VetOffer!] @paginate(model: "App\\Model\\VetOffer")
    animals: [Animal!] @paginate(model: "App\\Model\\Animal")
    sizes: [Size!] @paginate(model: "App\\Model\\Size")

    Invoices(id: ID @eq, client_id: ID @eq, vetOffer_id: ID @eq, reference_id: String @eq): [Invoice!] @paginate(model: "App\\Model\\Invoice")

}                                                                                                                                                                                                                                                                                                                              

extend type Query @middleware(checks: ["auth:api"]){
    me: User @auth
}


type User {
    id: ID!
    name: String!
    email: String!
    phone: String!
    role: Roles!
    created_at: DateTime!
    updated_at: DateTime!
}

# Inputs

input LoginInput {
    email: String! @rules(apply: ["required", "email"])
    password: String! @rules(apply: ["required", "min:6"])
}

input RegisterInput {
    role: Roles!
    name: String! @rules(apply: ["required", "string"])
    email: String! @rules(apply: ["required", "email", "unique:users,email"])
    phone: String! @rules(apply: ["required", "min:10", "unique:users,phone"])
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
}

input OrderByInput{
    field: String!
    order: SortOrder!
}

input CreateAddressOperations {
  connect: ID
  create: CreateAddressInput @create(relation: "address")
  update: UpdateAddressInput @update(relation: "address")
}

input CreateAddressInput {
    house_number: String
    street: String
    city: String
    postal_code: String
    loc_lat: String
    loc_long: String
}

input UpdateAddressInput {
    id: ID!
    house_number: String
    street: String
    city: String
    postal_code: String
    loc_lat: String
    loc_long: String
}

input CreateVetRequestInput {
    client_id: ID
    type: VetRequestTypes
    animal_id: ID!
    size_id: ID!
    description: String!
    address: CreateAddressOperations @nest
}

input UpdateVetRequestInput {
    id: ID!
    client_id: ID
    type: VetRequestTypes
    animal_id: ID
    size_id: ID
    description: String
    address: CreateAddressOperations @nest
}

input CreateVetOfferInput {
    vet_id: ID
    vet_request_id: ID
    price: String
    status: VetOfferStatuses
}

input UpdateVetOfferInput {
    id: ID!
    vet_id: ID
    vet_request_id: ID
    price: String
    status: VetOfferStatuses
}

input CreateInvoiceInput {
    client_id: ID!
    vet_offer_id: ID!
    reference_id: String!
    payment_gateway: String!
    amount_paid: String!
}

input UpdateInvoiceInput {
    id: ID!
    client_id: ID
    vet_offer_id: ID
    reference_id: String
    payment_gateway: String
    amount_paid: String
}

input CreateDriverRequestInput {
    client_id: ID
    type: DriverRequestTypes
    animal_id: ID!
    size_id: ID!
    description: String!
    address: CreateAddressOperations @nest
}

input UpdateDriverRequestInput {
    id: ID!
    client_id: ID
    animal_id: ID
    size_id: ID
    description: String
    address: CreateAddressOperations @nest
}

input CreateDriverOfferInput {
    driver_id: ID
    driver_request_id: ID
    price: String

}

input UpdateDriverOfferInput {
    id: ID!
    driver_id: ID
    driver_request_id: ID
    price: String
}


# Responses

type UserResponse {
    user: User!
    token: String!
}

type RoleResponse {
    name: String!
}

type LogoutResponse {
    status: String!
    message: String!
}

type Address {
    id: ID!
    house_number: String
    street: String
    city: String
    postal_code: String
    loc_lat: String
    loc_long: String
}

type VetRequest {
    id: ID
    client: User
    vet_offers: [VetOffer!]
    type: VetRequestTypes
    animal: Animal
    size: Size
    description: String
    address: Address @belongsTo(relation: "address")
    created_at: String
}

type VetOffer {
    id: ID
    veterenarian: User
    vet_request: VetRequest @belongsTo(relation: "vetRequest")
    price: String
    status: String
    created_at: String
}

type Animal {
    id: ID
    name: String
    name_ar: String
}

type Size {
    id: ID
    name: String
    name_ar: String
}

type Invoice {
    id: ID
    client: User @belongsTo(relation: "client")
    vet_offer: VetOffer @belongsTo(relation: "vetOffer")
    amount_paid: String
    reference_id: String
    payment_gateway: String
}

#Enums

enum Roles {
    ADMIN
    VETERINARIAN
    DRIVER
    CLIENT
}

enum SortOrder {
    ASC
    DESC
}

enum VetRequestTypes {
    CONSULTATION
    VISIT
}

enum VetOfferStatuses{
    PENDING
    SKIPPED
    ACCEPTED
    COMPLETED
}

